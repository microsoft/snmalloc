load("@bazel_skylib//rules:native_binary.bzl", "native_binary")
load("@rules_foreign_cc//foreign_cc:defs.bzl", "cmake")
load("@rules_cc//cc:defs.bzl", "cc_import")
load("@rules_rust_bindgen//:defs.bzl", "rust_bindgen_toolchain")

filegroup(
    name = "srcs",
    srcs = glob(
        [
            "src/snmalloc/**/*",
            "src/test/*.h",
            "CMakeLists.txt",
        ],
    ),
    visibility = ["//visibility:private"],
)

config_setting(
    name = "release_with_debug",
    values = {
        "compilation_mode": "fastbuild",
    },
)

config_setting(
    name = "release",
    values = {
        "compilation_mode": "opt",
    },
)

config_setting(
    name = "debug",
    values = {
        "compilation_mode": "dbg",
    },
)

CMAKE_FLAGS = {
    "CMAKE_INTERPROCEDURAL_OPTIMIZATION": "TRUE",
    "SNMALLOC_OPTIMISE_FOR_CURRENT_MACHINE": "ON",
    "SNMALLOC_USE_SELF_VENDORED_STL": "OFF",
    "SNMALLOC_IPO": "ON",
} | select({
    ":release_with_debug": {"CMAKE_BUILD_TYPE": "RelWithDebInfo"},
    ":release": {"CMAKE_BUILD_TYPE": "Release"},
    ":debug": {"CMAKE_BUILD_TYPE": "Debug"},
    "//conditions:default": {"CMAKE_BUILD_TYPE": "Release"},
})

cmake(
    name = "snmalloc",
    cache_entries = CMAKE_FLAGS,
    generate_args = ["-G Ninja"],
    lib_source = ":srcs",
    out_shared_libs = select({
        "@bazel_tools//src/conditions:darwin": [
            "libsnmallocshim-checks-memcpy-only.dylib",
            "libsnmallocshim-checks.dylib",
            "libsnmallocshim.dylib",
        ],
        "//conditions:default": [],
    }),
    out_static_libs = [
        "libsnmallocshim-static.a",
        "libsnmalloc-new-override.a",
    ],
    postfix_script = "ninja",
    visibility = ["//visibility:public"],
    alwayslink = True,
)

cmake(
    name = "snmalloc-rust-support",
    cache_entries = CMAKE_FLAGS | {
        "SNMALLOC_RUST_SUPPORT": "ON",
    },
    generate_args = ["-G Ninja"],
    lib_source = ":srcs",
    out_shared_libs = select({
        "@bazel_tools//src/conditions:darwin": [
            "libsnmallocshim-checks-memcpy-only.dylib",
            "libsnmallocshim-checks.dylib",
            "libsnmallocshim.dylib",
        ],
        "//conditions:default": [],
    }),
    out_static_libs = [
        "libsnmallocshim-static.a",
        "libsnmalloc-new-override.a",
    ],
    postfix_script = "ninja",
    visibility = ["//src/snmalloc_rs:__pkg__"],
    alwayslink = True,
)

alias(
    name = "snmalloc_rs",
    actual = "//src/snmalloc_rs",
    visibility = ["//visibility:public"],
)

native_binary(
    name = "clang",
    src = "@llvm_toolchain_llvm//:bin/clang",
    visibility = ["//snmalloc_rs:__subpackages__"],
)

cc_import(
    name = "libclang",
    shared_library = "@llvm_toolchain_llvm//:libclang",
    visibility = ["//snmalloc_rs:__subpackages__"],
)

rust_bindgen_toolchain(
    name = "rust_bindgen_toolchain",
    bindgen = "@rules_rust_bindgen//3rdparty:bindgen",
    clang = ":clang",
    libclang = ":libclang",
    visibility = ["//snmalloc_rs:__subpackages__"],
)

toolchain(
    name = "default_bindgen_toolchain",
    toolchain = ":rust_bindgen_toolchain",
    toolchain_type = "@rules_rust_bindgen//:toolchain_type",
    visibility = ["//snmalloc_rs:__subpackages__"],
)
