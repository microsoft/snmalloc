name: snmalloc CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master, snmalloc2 ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  unixlike:
    strategy:
      matrix:
        # Build each combination of OS and release/debug variants
        os: [ "ubuntu-latest", "ubuntu-18.04", "macos-11", "macos-10.15", "freebsd-12.2", "freebsd-13.0" ]
        build-type: [ Release, Debug ]
        extra-cmake-flags: [ " " ]
        # Modify the complete matrix
        include:
          # Provide the dependency installation for each platform
          - os: "ubuntu-18.04"
            dependencies: "sudo apt install ninja-build"
          - os: "ubuntu-latest"
            dependencies: "sudo apt install ninja-build"
          - os: "macos-11"
            dependencies: "brew update && brew install ninja"
          - os: "macos-10.15"
            dependencies: "brew update && brew install ninja"
          # Skip the tests for the FreeBSD release builds
          - os: "freebsd-13.0"
            build-type: Release
            build-only: yes
          - os: "freebsd-12.2"
            build-type: Release
            build-only: yes
          # Add an extra element to the matrix that does a build with clang 12
          # but doesn't run tests.
          - os: "freebsd-13.0"
            variant: Clang 12 (Build only)
            extra-cmake-flags: "-DCMAKE_CXX_COMPILER=clang++12"
            build-only: yes
      # Don't abort runners if a single one fails
      fail-fast: false
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} ${{ matrix.build-type }} ${{ matrix.variant }}
    steps:
    - uses: actions/checkout@v2
    - name: Install build dependencies
      run: ${{ matrix.dependencies }}
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -G Ninja ${{ matrix.extra-cmake-flags }}
      # Build with a nice ninja status line
    - name: Build
      working-directory: ${{github.workspace}}/build
      run: NINJA_STATUS="%p [%f:%s/%t] %o/s, %es" ninja
      # If the tests are enabled for this job, run them
    - name: Test
      if: ${{ matrix.build-only != 'yes' }}
      working-directory: ${{github.workspace}}/build
      run: ctest --output-on-failure -j 4

  windows:
    strategy:
      matrix:
        # Build each combination of OS and release/debug variants
        os: [ windows-2016, windows-2019 ]
        build-type: [ Release, Debug ]
        arch: [ x86, x64 ]
        toolchain: [ "", "-T ClangCL" ]
        extra-cmake-flags: [ "" ]
        include:
          - os: windows-2019
            generator: Visual Studio 16 2019
          - os: windows-2016
            generator: Visual Studio 15 2017
          - os: windows-2016
            build-type: Release
            arch: x64
            toolchain: ""
            extra-cmake-flags: -DWIN8COMPAT=TRUE
            variant: Windows 8 compatible
      # Don't abort runners if a single one fails
      fail-fast: false
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} ${{ matrix.build-type }} ${{ matrix.toolchain }} ${{ matrix.variant }}
    steps:
    - uses: actions/checkout@v2
    - name: Configure CMake
      run: >
        cmake -B ${{github.workspace}}/build -G \"${{ matrix.generator }}\"
        -A ${{ matrix.arch }}
        ${{ matrix.toolchain }}
        ${{ matrix.extra-cmake-flags }}
        -DSNMALLOC_CI_BUILD=On
        -DSNMALLOC_RUST_SUPPORT=On
      # Build with a nice ninja status line
    - name: Build
      working-directory: ${{ github.workspace }}/build
      run: msbuild snmalloc.sln /m /p:Configuration=${{ matrix.build-type }}
      # If the tests are enabled for this job, run them
    - name: Test
      working-directory: ${{ github.workspace }}/build
      run: ctest -j 2 --interactive-debug-mode 0 --output-on-failure -C ${{ matrix.build-type }}


  # Job to run clang-format and report errors
  format:
    runs-on: ubuntu-18.04
    # We don't need to do the build for this job, but we need to configure it to get the clang-format target
    steps:
    - uses: actions/checkout@v2
    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build 
    # Run the clang-format check and error if it generates a diff
    - name: Run clang-format
      working-directory: ${{github.workspace}}/build
      run: |
        set -eo pipefail
        make clangformat
        git diff --exit-code
    - name: Run clang-tidy
      run: |
        #clang-tidy-9  src/override/malloc.cc  -header-filter="`pwd`/*" -warnings-as-errors='*' -export-fixes=tidy.fail -- -std=c++17 -mcx16 -DSNMALLOC_PLATFORM_HAS_GETENTROPY=0
        if [ -f tidy.fail ] ; then
          cat tidy.fail
          exit 1
        fi

